services:
  postgres:
    image: postgres:14-alpine  # Используем облегчённый alpine-образ
    container_name: postgres
    environment:
      POSTGRES_DB: ordersdb
      POSTGRES_USER: order_user
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"  # Изменён порт для избежания конфликтов
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:  # Добавлен healthcheck для контроля готовности БД
      test: ["CMD-SHELL", "pg_isready -U order_user -d ordersdb"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - demo-net

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:  # Добавьте этот блок
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - demo-net

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"  # Автосоздание топиков
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
    networks:
      - demo-net

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: go-order-service
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      DB_DSN: postgres://order_user:password@postgres:5432/ordersdb?sslmode=disable
      KAFKA_BROKER: kafka:9092
      KAFKA_TOPIC: orders_topic
    ports:
      - "8081:8081"
    networks:
      - demo-net

volumes:
  pg_data:

networks:
  demo-net:
    driver: bridge

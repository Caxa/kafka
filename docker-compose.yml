version: '3.8'

services:
  postgres:
    image: postgres:14
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ordersdb
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ordersdb"]
      interval: 5s
      timeout: 5s
      retries: 30
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - demo-net

  app:
    build: .
    container_name: go-order-service
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DB_DSN: "postgres://postgres:postgres@postgres:5432/ordersdb?sslmode=disable"
      KAFKA_BROKER: "kafka:9092"
      KAFKA_TOPIC: "orders_topic"
      HTTP_PORT: ":8081"
    ports:
      - "8081:8081"
    volumes:
      - ./wait-for-postgres.sh:/wait-for-postgres.sh
    command: ["/bin/sh", "-c", "./wait-for-postgres.sh postgres:5432 -- sleep 5 && /app/main"]
    dns:
      - 8.8.8.8
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:8081/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - demo-net

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2182:2181"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - demo-net

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    hostname: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "29092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - demo-net

  kafka-rest-proxy:
    image: confluentinc/cp-kafka-rest:7.5.0
    container_name: kafka-rest-proxy
    depends_on:
      - kafka
    ports:
      - "8082:8082"
    environment:
      KAFKA_REST_HOST_NAME: kafka-rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
    networks:
      - demo-net

volumes:
  pg_data:

networks:
  demo-net:
    driver: bridge
    attachable: true
